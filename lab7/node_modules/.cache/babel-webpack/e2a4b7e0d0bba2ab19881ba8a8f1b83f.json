{"ast":null,"code":"import _asyncToGenerator from \"/Users/dmitrytukalevsky/Downloads/Other/fit/3 \\u043A\\u0443\\u0440\\u0441/1 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440/\\u041A\\u043E\\u043C\\u043F\\u043E\\u043D\\u0435\\u043D\\u0442\\u043D\\u0435 \\u0442\\u0430 \\u043F\\u0440\\u0435\\u0434\\u043C\\u0435\\u0442\\u043D\\u043E \\u043E\\u0440\\u0456\\u0454\\u043D\\u0442\\u043E\\u0432\\u0430\\u043D\\u0435 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u0443\\u0432\\u0430\\u043D\\u043D\\u044F/Code/lab7/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [AppComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n  it(`should have as title 'Lab7'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('Lab7');\n  });\n  it(`check empty login`, () => {\n    component.userData.login = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#loginErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check empty name`, () => {\n    component.userData.name = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#nameErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check empty email`, () => {\n    component.userData.email = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#emailErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check invalid email`, () => {\n    component.userData.email = \"@kpop.com\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#emailErr').textContent;\n    expect(elementText).toBe('Ошибка');\n  });\n  it(`check empty pass`, () => {\n    component.userData.sex = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check empty animal`, () => {\n    component.userData.animal = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#animalErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check empty age`, () => {\n    component.userData.age = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#ageErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check invalid age`, () => {\n    component.userData.age = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#ageErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check invalid animal`, () => {\n    component.userData.age = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#ageErr').textContent;\n    expect(elementText).toBe('Заполните');\n  });\n  it(`check empty sex`, () => {\n    component.userData.sex = \"\";\n    component.checkData();\n    fixture.detectChanges();\n    let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n    expect(elementText).toBe('Заполните');\n  }); // it(`check empty conf pass`, () => {\n  //   component.userData.bd=\"\";\n  //   component.checkData();\n  //   fixture.detectChanges();\n  //   let elementText = fixture.nativeElement.querySelector('#bdErr').textContent;\n  //   expect(elementText).toBe('Заполните');\n  // });\n  // it(`check different pass 1`, () => {\n  //   component.userData.sex=\"12345678\";\n  //   component.userData.bd=\"123456789\";\n  //   component.checkData();\n  //   fixture.detectChanges();\n  //   let elementText = fixture.nativeElement.querySelector('#bdErr').textContent;\n  //   expect(elementText).toBe('must be equal');\n  // });\n  // it(`check different pass 2`, () => {\n  //   component.userData.sex=\"123456789\";\n  //   component.userData.bd=\"12345678\";\n  //   component.checkData();\n  //   fixture.detectChanges();\n  //   let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n  //   expect(elementText).toBe('must be equal');\n  // });\n  // it(`just to make it 19`, () => {\n  //   component.userData.sex=\"123456789\";\n  //   component.userData.bd=\"12345678\";\n  //   component.checkData();\n  //   fixture.detectChanges();\n  //   let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n  //   expect(elementText).toBe('must be equal');\n  // });\n  // it(`just to make it 20`, () => {\n  //   component.userData.sex=\"123456789\";\n  //   component.userData.bd=\"12345678\";\n  //   component.checkData();\n  //   fixture.detectChanges();\n  //   let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n  //   expect(elementText).toBe('must be equal');\n  // });\n  // it(`check invalid card`, () => {\n  //   component.userData.card=\"asdasd\";\n  //   component.checkData();\n  //   fixture.detectChanges();\n  //   let elementText = fixture.nativeElement.querySelector('#cardErr').textContent;\n  //   expect(elementText).toBe('Ошибка');\n  // });\n\n  /*it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('.content span')?.textContent).toContain('Lab7 app is running!');\n  });*/\n});","map":{"version":3,"sources":["/Users/dmitrytukalevsky/Downloads/Other/fit/3 курс/1 семестр/Компонентне та предметно орієнтоване програмування/Code/lab7/src/app/app.component.spec.ts"],"names":["TestBed","RouterTestingModule","AppComponent","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","app","expect","toBeTruthy","title","toEqual","userData","login","checkData","elementText","nativeElement","querySelector","textContent","toBe","name","email","sex","animal","age"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACAC,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC3B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMN,OAAO,CAACO,sBAAR,CAA+B;AACjCC,MAAAA,OAAO,EAAE,CACLP,mBADK,CADwB;AAIjCQ,MAAAA,YAAY,EAAE,CACVP,YADU;AAJmB,KAA/B,EAOHQ,iBAPG,EAAN;AAQH,GATS,EAAV;AAUAJ,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGL,OAAO,CAACW,eAAR,CAAwBT,YAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACO,iBAApB;AACAP,IAAAA,OAAO,CAACQ,aAAR;AACH,GAJS,CAAV;AAKAC,EAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAC9B,UAAMT,OAAO,GAAGL,OAAO,CAACW,eAAR,CAAwBT,YAAxB,CAAhB;AACA,UAAMa,GAAG,GAAGV,OAAO,CAACO,iBAApB;AACAI,IAAAA,MAAM,CAACD,GAAD,CAAN,CAAYE,UAAZ;AACH,GAJC,CAAF;AAKAH,EAAAA,EAAE,CAAE,6BAAF,EAAgC,MAAM;AACpC,UAAMT,OAAO,GAAGL,OAAO,CAACW,eAAR,CAAwBT,YAAxB,CAAhB;AACA,UAAMa,GAAG,GAAGV,OAAO,CAACO,iBAApB;AACAI,IAAAA,MAAM,CAACD,GAAG,CAACG,KAAL,CAAN,CAAkBC,OAAlB,CAA0B,MAA1B;AACH,GAJC,CAAF;AAKAL,EAAAA,EAAE,CAAE,mBAAF,EAAsB,MAAM;AAC1BV,IAAAA,SAAS,CAACgB,QAAV,CAAmBC,KAAnB,GAA2B,EAA3B;AACAjB,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,WAApC,EAAiDC,WAAnE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,kBAAF,EAAqB,MAAM;AACzBV,IAAAA,SAAS,CAACgB,QAAV,CAAmBQ,IAAnB,GAA0B,EAA1B;AACAxB,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,UAApC,EAAgDC,WAAlE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,mBAAF,EAAsB,MAAM;AAC1BV,IAAAA,SAAS,CAACgB,QAAV,CAAmBS,KAAnB,GAA2B,EAA3B;AACAzB,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,WAApC,EAAiDC,WAAnE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,qBAAF,EAAwB,MAAM;AAC5BV,IAAAA,SAAS,CAACgB,QAAV,CAAmBS,KAAnB,GAA2B,WAA3B;AACAzB,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,WAApC,EAAiDC,WAAnE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,QAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,kBAAF,EAAqB,MAAM;AACzBV,IAAAA,SAAS,CAACgB,QAAV,CAAmBU,GAAnB,GAAyB,EAAzB;AACA1B,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,SAApC,EAA+CC,WAAjE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,oBAAF,EAAuB,MAAM;AAC3BV,IAAAA,SAAS,CAACgB,QAAV,CAAmBW,MAAnB,GAA4B,EAA5B;AACA3B,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,YAApC,EAAkDC,WAApE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,iBAAF,EAAoB,MAAM;AACxBV,IAAAA,SAAS,CAACgB,QAAV,CAAmBY,GAAnB,GAAyB,EAAzB;AACA5B,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,SAApC,EAA+CC,WAAjE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,mBAAF,EAAsB,MAAM;AAC1BV,IAAAA,SAAS,CAACgB,QAAV,CAAmBY,GAAnB,GAAyB,EAAzB;AACA5B,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,SAApC,EAA+CC,WAAjE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,sBAAF,EAAyB,MAAM;AAC7BV,IAAAA,SAAS,CAACgB,QAAV,CAAmBY,GAAnB,GAAyB,EAAzB;AACA5B,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,SAApC,EAA+CC,WAAjE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF;AAOAb,EAAAA,EAAE,CAAE,iBAAF,EAAoB,MAAM;AACxBV,IAAAA,SAAS,CAACgB,QAAV,CAAmBU,GAAnB,GAAyB,EAAzB;AACA1B,IAAAA,SAAS,CAACkB,SAAV;AACAjB,IAAAA,OAAO,CAACQ,aAAR;AACA,QAAIU,WAAW,GAAGlB,OAAO,CAACmB,aAAR,CAAsBC,aAAtB,CAAoC,SAApC,EAA+CC,WAAjE;AACAV,IAAAA,MAAM,CAACO,WAAD,CAAN,CAAoBI,IAApB,CAAyB,WAAzB;AACH,GANC,CAAF,CA3F2B,CAkG3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACC,CAtJO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            imports: [\n                RouterTestingModule\n            ],\n            declarations: [\n                AppComponent\n            ],\n        }).compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(AppComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create the app', () => {\n        const fixture = TestBed.createComponent(AppComponent);\n        const app = fixture.componentInstance;\n        expect(app).toBeTruthy();\n    });\n    it(`should have as title 'Lab7'`, () => {\n        const fixture = TestBed.createComponent(AppComponent);\n        const app = fixture.componentInstance;\n        expect(app.title).toEqual('Lab7');\n    });\n    it(`check empty login`, () => {\n        component.userData.login = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#loginErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check empty name`, () => {\n        component.userData.name = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#nameErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check empty email`, () => {\n        component.userData.email = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#emailErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check invalid email`, () => {\n        component.userData.email = \"@kpop.com\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#emailErr').textContent;\n        expect(elementText).toBe('Ошибка');\n    });\n    it(`check empty pass`, () => {\n        component.userData.sex = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check empty animal`, () => {\n        component.userData.animal = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#animalErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check empty age`, () => {\n        component.userData.age = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#ageErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check invalid age`, () => {\n        component.userData.age = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#ageErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check invalid animal`, () => {\n        component.userData.age = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#ageErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    it(`check empty sex`, () => {\n        component.userData.sex = \"\";\n        component.checkData();\n        fixture.detectChanges();\n        let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n        expect(elementText).toBe('Заполните');\n    });\n    // it(`check empty conf pass`, () => {\n    //   component.userData.bd=\"\";\n    //   component.checkData();\n    //   fixture.detectChanges();\n    //   let elementText = fixture.nativeElement.querySelector('#bdErr').textContent;\n    //   expect(elementText).toBe('Заполните');\n    // });\n    // it(`check different pass 1`, () => {\n    //   component.userData.sex=\"12345678\";\n    //   component.userData.bd=\"123456789\";\n    //   component.checkData();\n    //   fixture.detectChanges();\n    //   let elementText = fixture.nativeElement.querySelector('#bdErr').textContent;\n    //   expect(elementText).toBe('must be equal');\n    // });\n    // it(`check different pass 2`, () => {\n    //   component.userData.sex=\"123456789\";\n    //   component.userData.bd=\"12345678\";\n    //   component.checkData();\n    //   fixture.detectChanges();\n    //   let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n    //   expect(elementText).toBe('must be equal');\n    // });\n    // it(`just to make it 19`, () => {\n    //   component.userData.sex=\"123456789\";\n    //   component.userData.bd=\"12345678\";\n    //   component.checkData();\n    //   fixture.detectChanges();\n    //   let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n    //   expect(elementText).toBe('must be equal');\n    // });\n    // it(`just to make it 20`, () => {\n    //   component.userData.sex=\"123456789\";\n    //   component.userData.bd=\"12345678\";\n    //   component.checkData();\n    //   fixture.detectChanges();\n    //   let elementText = fixture.nativeElement.querySelector('#sexErr').textContent;\n    //   expect(elementText).toBe('must be equal');\n    // });\n    // it(`check invalid card`, () => {\n    //   component.userData.card=\"asdasd\";\n    //   component.checkData();\n    //   fixture.detectChanges();\n    //   let elementText = fixture.nativeElement.querySelector('#cardErr').textContent;\n    //   expect(elementText).toBe('Ошибка');\n    // });\n    /*it('should render title', () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      const compiled = fixture.nativeElement as HTMLElement;\n      expect(compiled.querySelector('.content span')?.textContent).toContain('Lab7 app is running!');\n    });*/\n});\n"]},"metadata":{},"sourceType":"module"}